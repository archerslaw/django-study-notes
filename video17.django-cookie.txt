1.#vim settings.py
INSTALLED_APPS = (
    'online',
    ...
)
#vim urls.py
    url(r'^regist/$', 'online.views.regist'),
    url(r'^login/$', 'online.views.login'),
    url(r'^index/$', 'online.views.index'),
    url(r'^logout/$', 'online.views.logout'),

2.#mkdir online/templates
#vim online/models.py
from django.db import models

class User(models.Model):
    username = models.CharField(max_length=30)
    password = models.CharField(max_length=30)

    def __unicode__(self):
        return self.username

3.#vim online/views.py
from django import forms
from django.http import HttpResponse, HttpResponseRedirect
from django.shortcuts import render_to_response
from models improt User

class UserForm(forms.Form):
    username = forms.CharField()
    password = forms.CharField(widget=forms.PasswordInput)

def regist(req):
    if req.method == "POST"
        uf = UserForm(req.POST)
        if uf.is_valid():
            username = uf.cleaned_data['username']
            password = uf.cleaned_data['password']
            #print username, password
            User.object.create(username=username, password=password)
            #return HttpResponse('OK')
            return HttpResponseRedirect('/login/')
    else:
        uf = UserForm()
    return render_to_response('regist.html', 'uf': uf)

def login(req):
    if req.method == "POST"        
        uf = UserForm(req.POST)    
        if uf.is_valid():          
            username = uf.cleaned_data['username']
            password = uf.cleaned_data['password']
            users = User.object.filter(username__exact=username, password__exact=password)
            if users:
                response = HttpResponseRedirect('/index/')
                response.set_cookie('username', username, 3600)
                return response
            else:
                return HttpResponseRedirect('/login/')
    else:      
        uf = UserForm()            
    return render_to_response('login.html', 'uf': uf)

def index(req):
    username = req.COOKIES.get('username', '')
    #return HttpResponse('Welcome to %s.' % username)
    return render_to_response('index.html', {'username': username})

def logout(req):
    #del req
    response = HttpResponse('logout')
    response.delete_cookie('username')
    return response

4.#vim online/templates/regist.html
<form method="post">
    {{ uf.as_p }}
    <input type="submit" value="OK" />
</form>

#vim online/templates/login.html
<form method="post">            
    {{ uf.as_p }}               
    <input type="submit" value="OK" />
</form>

#vim online/templates/index.html
<div>
    <h1>Welcome to {{ username }}.</h1>
    <a href='/logout/'>logout</a>
</div>
5.#python manage.py syncdb
#python manage.py runserver

6.#sqllite3 demo.db
sqlite> select * from online_user;
sqlite>

7.HttpRequest.COOKIES
https://docs.djangoproject.com/en/1.7/ref/request-response/
A standard Python dictionary containing all cookies. Keys and values are strings.
HttpResponse.set_cookie(key, value='', max_age=None, expires=None, path='/', domain=None, secure=None, httponly=False)
Sets a cookie. The parameters are the same as in the Morsel cookie object in the Python standard library.
HttpResponse.delete_cookie(key, path='/', domain=None)
Deletes the cookie with the given key. Fails silently if the key doesnâ€™t exist.
